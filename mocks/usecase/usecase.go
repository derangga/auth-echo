// Code generated by MockGen. DO NOT EDIT.
// Source: usecase/usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	dto "auth-echo/model/dto"
	requests "auth-echo/model/requests"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthUsecase is a mock of AuthUsecase interface.
type MockAuthUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockAuthUsecaseMockRecorder
}

// MockAuthUsecaseMockRecorder is the mock recorder for MockAuthUsecase.
type MockAuthUsecaseMockRecorder struct {
	mock *MockAuthUsecase
}

// NewMockAuthUsecase creates a new mock instance.
func NewMockAuthUsecase(ctrl *gomock.Controller) *MockAuthUsecase {
	mock := &MockAuthUsecase{ctrl: ctrl}
	mock.recorder = &MockAuthUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthUsecase) EXPECT() *MockAuthUsecaseMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockAuthUsecase) Login(ctx context.Context, cred dto.Login) (dto.Authorization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, cred)
	ret0, _ := ret[0].(dto.Authorization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockAuthUsecaseMockRecorder) Login(ctx, cred interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockAuthUsecase)(nil).Login), ctx, cred)
}

// Logout mocks base method.
func (m *MockAuthUsecase) Logout(ctx context.Context, deviceId string, userId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", ctx, deviceId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Logout indicates an expected call of Logout.
func (mr *MockAuthUsecaseMockRecorder) Logout(ctx, deviceId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockAuthUsecase)(nil).Logout), ctx, deviceId, userId)
}

// Register mocks base method.
func (m *MockAuthUsecase) Register(ctx context.Context, user requests.Register) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockAuthUsecaseMockRecorder) Register(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockAuthUsecase)(nil).Register), ctx, user)
}

// RenewalToken mocks base method.
func (m *MockAuthUsecase) RenewalToken(ctx context.Context, header requests.RefreshTokenHeaderReq, body requests.RefreshTokenBodyReq) (dto.Authorization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenewalToken", ctx, header, body)
	ret0, _ := ret[0].(dto.Authorization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenewalToken indicates an expected call of RenewalToken.
func (mr *MockAuthUsecaseMockRecorder) RenewalToken(ctx, header, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenewalToken", reflect.TypeOf((*MockAuthUsecase)(nil).RenewalToken), ctx, header, body)
}
